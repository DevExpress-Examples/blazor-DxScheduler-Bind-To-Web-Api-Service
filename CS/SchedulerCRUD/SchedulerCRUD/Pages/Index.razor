@page "/"
@using SchedulerCRUD.Data
@inject HttpClient Http

@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Text

<DxScheduler Id="schedulerWeekView"
             StartDate="@startDate"
             DataStorage="@DataStorage"
             AppointmentInserting="AppointmentInserting"
             AppointmentRemoving="@AppointmentRemoving"
             AppointmentUpdating="AppointmentUpdating">
    <DxSchedulerDayView ShowWorkTimeOnly="true"></DxSchedulerDayView>
</DxScheduler>

@code {
    protected DateTime startDate { get; set; } = new DateTime(2016, 10, 10);
    DxSchedulerDataStorage DataStorage = new DxSchedulerDataStorage()
        {
            AppointmentsSource = null,
            AppointmentMappings = new DxSchedulerAppointmentMappings()
            {
                Id = "id",
                Type = "eventType",
                Start = "startTime",
                End = "endTime",
                Subject = "subject",
                AllDay = "allDay",
                Location = "location",
                Description = "description",
                LabelId = "label",
                StatusId = "status",
            }
        };

    string fullWebAPIUrl = "https://localhost:44310/api/MedicalAppointments/";
    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetAsync(fullWebAPIUrl);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            DataStorage.AppointmentsSource = await JsonSerializer.DeserializeAsync<IEnumerable<MedicalAppointments>>(responseStream);
        }
    }

    async Task<HttpResponseMessage> PostItemAsync(MedicalAppointments item) {
        var myContent = JsonSerializer.Serialize(item);

        var response = await Http.PostAsync(fullWebAPIUrl, new StringContent(myContent, Encoding.Unicode, "application/json"));
        return response;
    }

    async Task AppointmentInserting(SchedulerAppointmentOperationEventArgs e)
    {
        MedicalAppointments insertedItem = e.Appointment.SourceObject as MedicalAppointments;
        HttpResponseMessage response = await PostItemAsync(insertedItem);

        if(response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            MedicalAppointments newItem = await JsonSerializer.DeserializeAsync<MedicalAppointments>(responseStream);
            insertedItem.id = newItem.id;
        }
        else
            e.Cancel = true;
    }
    async Task AppointmentUpdating(SchedulerAppointmentOperationEventArgs e)
    {
        MedicalAppointments updatedItem = e.Appointment.SourceObject as MedicalAppointments;
        
        var myContent = JsonSerializer.Serialize(updatedItem);
        var request = new HttpRequestMessage(HttpMethod.Put, fullWebAPIUrl + Convert.ToInt32(updatedItem.id));
        request.Content = new StringContent(myContent, Encoding.Unicode, "application/json");

        var response = await Http.SendAsync(request);
        if(response.IsSuccessStatusCode)
            e.Cancel = true;
    }
    async Task AppointmentRemoving(SchedulerAppointmentOperationEventArgs e)
    {
        var response = await Http.DeleteAsync(fullWebAPIUrl + e.Appointment.Id);
        if (!response.IsSuccessStatusCode)
            e.Cancel = true;
    }
}
